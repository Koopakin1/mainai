import os
import logging
import requests
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler, ConversationHandler
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

def get_secret(path, default=None):
    try:
        with open(path) as f:
            return f.read().strip()
    except Exception:
        return default

TELEGRAM_TOKEN = get_secret(os.environ.get('TELEGRAM_TOKEN_FILE', '/run/secrets/telegram_token'))
OPENAI_API_KEY = get_secret(os.environ.get('OPENAI_API_KEY_FILE', '/run/secrets/openai_api_key'))

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler ---
SELECT_SETTING, = range(1)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup([
    [KeyboardButton('üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å')],
    [KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')],
    [KeyboardButton('‚ÑπÔ∏è –û –±–æ—Ç–µ')]
], resize_keyboard=True)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
FORMAT_OPTIONS = [
    ('–ó–∞–≥–æ–ª–æ–≤–æ–∫ + —Ç–µ–∫—Å—Ç', 'title_text'),
    ('–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç', 'text'),
    ('–¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫', 'title')
]
TONE_OPTIONS = [
    ('–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è', 'neutral'),
    ('–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è', 'positive'),
    ('–ü—Ä–æ–¥–∞—é—â–∞—è', 'sales'),
    ('–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è', 'expert')
]
LENGTH_OPTIONS = [
    ('–ö–æ—Ä–æ—Ç–∫–∏–π', 'short'),
    ('–°—Ä–µ–¥–Ω–∏–π', 'medium'),
    ('–î–ª–∏–Ω–Ω—ã–π', 'long')
]

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò.\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.',
        reply_markup=main_menu
    )

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu)

# --- –û –±–æ—Ç–µ ---
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'ü§ñ <b>AI Telegram Bot</b>\n\n'
        '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò (OpenAI).\n'
        '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç, —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.',
        parse_mode='HTML',
        reply_markup=main_menu
    )

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton('–§–æ—Ä–º–∞—Ç', callback_data='set_format')],
        [InlineKeyboardButton('–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', callback_data='set_tone')],
        [InlineKeyboardButton('–î–ª–∏–Ω–∞', callback_data='set_length')],
        [InlineKeyboardButton('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', reply_markup=reply_markup)
    return SELECT_SETTING

async def settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == 'set_format':
        keyboard = [[InlineKeyboardButton(name, callback_data=f'format_{val}')] for name, val in FORMAT_OPTIONS]
        keyboard.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='settings_menu')])
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == 'set_tone':
        keyboard = [[InlineKeyboardButton(name, callback_data=f'tone_{val}')] for name, val in TONE_OPTIONS]
        keyboard.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='settings_menu')])
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:', reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == 'set_length':
        keyboard = [[InlineKeyboardButton(name, callback_data=f'length_{val}')] for name, val in LENGTH_OPTIONS]
        keyboard.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='settings_menu')])
        await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞:', reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == 'settings_menu':
        await settings_menu(query, context)
    elif data == 'back_to_menu':
        await query.edit_message_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:')
        await main_menu_handler(query, context)
    elif data.startswith('format_'):
        context.user_data['format'] = data.replace('format_', '')
        await query.edit_message_text('–§–æ—Ä–º–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!')
        await settings_menu(query, context)
    elif data.startswith('tone_'):
        context.user_data['tone'] = data.replace('tone_', '')
        await query.edit_message_text('–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
        await settings_menu(query, context)
    elif data.startswith('length_'):
        context.user_data['length'] = data.replace('length_', '')
        await query.edit_message_text('–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
        await settings_menu(query, context)
    return SELECT_SETTING

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == 'üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å':
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–∞–π—Ç–∞ –ø—Ä–æ –∫–æ—Ñ–µ")', reply_markup=ReplyKeyboardRemove())
        context.user_data['awaiting_prompt'] = True
        return
    if text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏':
        await settings_menu(update, context)
        return
    if text == '‚ÑπÔ∏è –û –±–æ—Ç–µ':
        await about(update, context)
        return
    if context.user_data.get('awaiting_prompt'):
        await update.message.reply_text('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...')
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        fmt = context.user_data.get('format', 'title_text')
        tone = context.user_data.get('tone', 'neutral')
        length = context.user_data.get('length', 'medium')
        title, body = generate_ai_text(text, fmt, tone, length)
        if fmt == 'title_text':
            await update.message.reply_text(f'<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}\n<b>–¢–µ–∫—Å—Ç:</b> {body}', parse_mode='HTML', reply_markup=main_menu)
        elif fmt == 'title':
            await update.message.reply_text(f'<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}', parse_mode='HTML', reply_markup=main_menu)
        elif fmt == 'text':
            await update.message.reply_text(f'<b>–¢–µ–∫—Å—Ç:</b> {body}', parse_mode='HTML', reply_markup=main_menu)
        context.user_data['awaiting_prompt'] = False
        return
    await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.', reply_markup=main_menu)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI API ---
def generate_ai_text(prompt: str, fmt: str, tone: str, length: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI API —Å —É—á—ë—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–∞, —Ç–æ–Ω–∞ –∏ –¥–ª–∏–Ω—ã
    """
    url = 'https://api.openai.com/v1/chat/completions'
    headers = {
        'Authorization': f'Bearer {OPENAI_API_KEY}',
        'Content-Type': 'application/json'
    }
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π prompt —Å —É—á—ë—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
    system_prompt = (
        f'–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫-–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {fmt}. '
        f'–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {tone}. –î–ª–∏–Ω–∞: {length}. '
        '–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç "–ó–∞–≥–æ–ª–æ–≤–æ–∫ + —Ç–µ–∫—Å—Ç", —Å–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∑–∞—Ç–µ–º –∞–±–∑–∞—Ü —Ç–µ–∫—Å—Ç–∞. '
        '–û—Ç–≤–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–ó–∞–≥–æ–ª–æ–≤–æ–∫: ...\n–¢–µ–∫—Å—Ç: ...". '
        '–ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî —Ç–æ–ª—å–∫–æ "–ó–∞–≥–æ–ª–æ–≤–æ–∫: ...". –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç ‚Äî —Ç–æ–ª—å–∫–æ "–¢–µ–∫—Å—Ç: ...".'
    )
    data = {
        'model': 'gpt-3.5-turbo',
        'messages': [
            {'role': 'system', 'content': system_prompt},
            {'role': 'user', 'content': prompt}
        ],
        'max_tokens': 400,
        'temperature': 0.8
    }
    try:
        resp = requests.post(url, headers=headers, json=data, timeout=30)
        resp.raise_for_status()
        answer = resp.json()['choices'][0]['message']['content']
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        title, body = '', ''
        if '–ó–∞–≥–æ–ª–æ–≤–æ–∫:' in answer:
            title = answer.split('–ó–∞–≥–æ–ª–æ–≤–æ–∫:')[1].split('–¢–µ–∫—Å—Ç:')[0].strip() if '–¢–µ–∫—Å—Ç:' in answer else answer.split('–ó–∞–≥–æ–ª–æ–≤–æ–∫:')[1].strip()
        if '–¢–µ–∫—Å—Ç:' in answer:
            body = answer.split('–¢–µ–∫—Å—Ç:')[1].strip()
        return title, body
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ OpenAI: {e}')
        return '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.'

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('menu', main_menu_handler))
    app.add_handler(CommandHandler('about', about))
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('settings', settings_menu)],
        states={
            SELECT_SETTING: [CallbackQueryHandler(settings_callback)]
        },
        fallbacks=[CommandHandler('menu', main_menu_handler)]
    )
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main()) 