import logging  # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import sqlite3  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)
import subprocess  # –î–ª—è –∑–∞–ø—É—Å–∫–∞ Scrapy –∫–∞–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞
import requests  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å HashiCorp Vault
from telegram import (
    Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, ConversationHandler,
    CallbackQueryHandler, MessageHandler, filters
)  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –¥–∏–∞–ª–æ–≥–æ–≤

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞ –∏–∑ HashiCorp Vault ---
def get_secret_from_vault(vault_addr, token, secret_path, key):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç –∏–∑ HashiCorp Vault —á–µ—Ä–µ–∑ HTTP API.
    vault_addr: –∞–¥—Ä–µ—Å Vault (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://vault:8200)
    token: Vault Token (root –∏–ª–∏ —Å –Ω—É–∂–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏)
    secret_path: –ø—É—Ç—å –∫ —Å–µ–∫—Ä–µ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, secret/data/telegram)
    key: –∫–ª—é—á –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ä–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, TELEGRAM_TOKEN)
    """
    url = f"{vault_addr}/v1/{secret_path}"
    headers = {"X-Vault-Token": token}
    try:
        resp = requests.get(url, headers=headers, timeout=5)
        resp.raise_for_status()
        data = resp.json()
        # –î–ª—è KV v2 —Å–µ–∫—Ä–µ—Ç—ã –ª–µ–∂–∞—Ç –≤ data->data
        return data["data"]["data"][key]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞ –∏–∑ Vault: {e}")
        return None

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# --- –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Telegram –∏–∑ Vault –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
VAULT_ADDR = os.environ.get('VAULT_ADDR')
VAULT_TOKEN = os.environ.get('VAULT_TOKEN')
VAULT_SECRET_PATH = os.environ.get('VAULT_SECRET_PATH', 'secret/data/telegram')
VAULT_SECRET_KEY = os.environ.get('VAULT_SECRET_KEY', 'TELEGRAM_TOKEN')

if VAULT_ADDR and VAULT_TOKEN:
    TELEGRAM_TOKEN = get_secret_from_vault(VAULT_ADDR, VAULT_TOKEN, VAULT_SECRET_PATH, VAULT_SECRET_KEY)
else:
    TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN', '–í–ê–®_–¢–û–ö–ï–ù_–¢–£–¢')

DB_PATH = 'config.db'
SELECT_PARAM, INPUT_VALUE = range(2)

PARAMS = {
    'user_agent': 'User-Agent',
    'download_delay': '–ó–∞–¥–µ—Ä–∂–∫–∞ (DOWNLOAD_DELAY)',
    'proxy': '–ü—Ä–æ–∫—Å–∏',
}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö')],
        [KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'), KeyboardButton('üìÑ –ú–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')],
        [KeyboardButton('‚ÑπÔ∏è –û –±–æ—Ç–µ')]
    ], resize_keyboard=True
)

# --- –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ ---
back_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]], resize_keyboard=True
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS configs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            param TEXT,
            value TEXT
        )
    ''')
    conn.commit()
    conn.close()

def save_param(user_id, param, value):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM configs WHERE user_id=? AND param=?', (user_id, param))
    row = cursor.fetchone()
    if row:
        cursor.execute('UPDATE configs SET value=? WHERE id=?', (value, row[0]))
    else:
        cursor.execute('INSERT INTO configs (user_id, param, value) VALUES (?, ?, ?)', (user_id, param, value))
    conn.commit()
    conn.close()

def get_param(user_id, param):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT value FROM configs WHERE user_id=? AND param=?', (user_id, param))
    row = cursor.fetchone()
    conn.close()
    return row[0] if row else None

def get_all_params(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT param, value FROM configs WHERE user_id=?', (user_id,))
    rows = cursor.fetchall()
    conn.close()
    return {param: value for param, value in rows}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Scrapy.\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—é –Ω–∏–∂–µ.',
        reply_markup=main_menu_keyboard
    )

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu_keyboard)

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'ü§ñ <b>Scrapy Telegram –ë–æ—Ç</b>\n\n'
        '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ Scrapy –ø—Ä—è–º–æ –∏–∑ Telegram.\n'
        '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n\n'
        '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –ê–Ω–¥—Ä–µ–π',
        parse_mode='HTML',
        reply_markup=main_menu_keyboard
    )

async def my_params(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    params = get_all_params(user_id)
    if not params:
        text = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.'
    else:
        text = '–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n'
        for key, name in PARAMS.items():
            value = params.get(key, '‚Äî')
            text += f'<b>{name}:</b> {value}\n'
    await update.message.reply_text(text, parse_mode='HTML', reply_markup=main_menu_keyboard)

# --- –î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=key)] for key, name in PARAMS.items()
    ]
    keyboard.append([InlineKeyboardButton('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=reply_markup)
    return SELECT_PARAM

async def select_param(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    param_key = query.data
    if param_key == 'back_to_menu':
        await query.edit_message_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:')
        await main_menu(query, context)
        return ConversationHandler.END
    context.user_data['param_key'] = param_key
    await query.edit_message_text(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è "{PARAMS[param_key]}":', reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_menu')]]))
    return INPUT_VALUE

async def input_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    param_key = context.user_data.get('param_key')
    value = update.message.text.strip()
    save_param(user_id, param_key, value)
    await update.message.reply_text(f'–ü–∞—Ä–∞–º–µ—Ç—Ä "{PARAMS[param_key]}" —Å–æ—Ö—Ä–∞–Ω—ë–Ω!', reply_markup=main_menu_keyboard)
    return ConversationHandler.END

# --- –ó–∞–ø—É—Å–∫ Scrapy ---
async def run_scrapy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text('‚è≥ –ó–∞–ø—É—Å–∫–∞—é Scrapy... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.', reply_markup=ReplyKeyboardRemove())
    output_file = f'result_{user_id}.json'
    user_agent = get_param(user_id, 'user_agent')
    download_delay = get_param(user_id, 'download_delay')
    proxy = get_param(user_id, 'proxy')
    cmd = [
        'python', '-m', 'scrapy', 'crawl', 'example',
        '-o', output_file
    ]
    env = os.environ.copy()
    if user_agent:
        env['SCRAPY_USER_AGENT'] = user_agent
    if download_delay:
        env['SCRAPY_DOWNLOAD_DELAY'] = download_delay
    if proxy:
        env['SCRAPY_PROXY'] = proxy
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=os.getcwd(), env=env)
        if result.returncode == 0:
            await update.message.reply_text('‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...', reply_markup=main_menu_keyboard)
            with open(output_file, 'rb') as f:
                await update.message.reply_document(document=InputFile(f, filename=output_file))
            os.remove(output_file)
        else:
            await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Scrapy!', reply_markup=main_menu_keyboard)
            await update.message.reply_text(result.stderr, reply_markup=main_menu_keyboard)
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}', reply_markup=main_menu_keyboard)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö':
        await run_scrapy(update, context)
    elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        await settings_command(update, context)
    elif text == 'üìÑ –ú–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã':
        await my_params(update, context)
    elif text == '‚ÑπÔ∏è –û –±–æ—Ç–µ':
        await about(update, context)
    elif text == '‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await main_menu(update, context)
    else:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.', reply_markup=main_menu_keyboard)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('menu', main_menu))
    app.add_handler(CommandHandler('about', about))
    app.add_handler(CommandHandler('myparams', my_params))
    app.add_handler(CommandHandler('run', run_scrapy))
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('settings', settings_command)],
        states={
            SELECT_PARAM: [CallbackQueryHandler(select_param)],
            INPUT_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_value)],
        },
        fallbacks=[MessageHandler(filters.Regex('‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), main_menu)]
    )
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_buttons))
    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main()) 