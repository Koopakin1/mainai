import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from kafka import KafkaAdminClient, KafkaProducer, KafkaConsumer
from kafka.admin import NewTopic
import os

def get_secret(path, default=None):
    try:
        with open(path) as f:
            return f.read().strip()
    except Exception:
        return default

TELEGRAM_TOKEN = get_secret(os.environ.get('TELEGRAM_TOKEN_FILE', '/run/secrets/telegram_token'))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥ Kafka
KAFKA_BOOTSTRAP_SERVERS = os.environ.get('KAFKA_BOOTSTRAP_SERVERS', 'kafka:9092')

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup([
    [KeyboardButton('üìã –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤')],
    [KeyboardButton('‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫'), KeyboardButton('‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–ø–∏–∫')],
    [KeyboardButton('üëÅÔ∏è‚Äçüó®Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'), KeyboardButton('‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')],
], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Kafka.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == 'üìã –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤':
        await list_topics(update)
    elif text == '‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫':
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞:')
        context.user_data['action'] = 'create_topic'
    elif text == '‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–ø–∏–∫':
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–æ–ø–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:')
        context.user_data['action'] = 'delete_topic'
    elif text == 'üëÅÔ∏è‚Äçüó®Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è':
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–æ–ø–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:')
        context.user_data['action'] = 'view_messages'
    elif text == '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ':
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–æ–ø–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:')
        context.user_data['action'] = 'send_message_topic'
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        action = context.user_data.get('action')
        if action == 'create_topic':
            await create_topic(update, text)
            context.user_data['action'] = None
        elif action == 'delete_topic':
            await delete_topic(update, text)
            context.user_data['action'] = None
        elif action == 'view_messages':
            await view_messages(update, text)
            context.user_data['action'] = None
        elif action == 'send_message_topic':
            context.user_data['send_topic'] = text
            await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:')
            context.user_data['action'] = 'send_message_text'
        elif action == 'send_message_text':
            topic = context.user_data.get('send_topic')
            await send_message(update, topic, text)
            context.user_data['action'] = None
            context.user_data['send_topic'] = None
        else:
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.', reply_markup=main_menu)

# –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤
async def list_topics(update: Update):
    admin = KafkaAdminClient(bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS)
    topics = admin.list_topics()
    await update.message.reply_text('–¢–æ–ø–∏–∫–∏ Kafka:\n' + '\n'.join(topics), reply_markup=main_menu)
    admin.close()

# –°–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫
async def create_topic(update: Update, topic_name: str):
    admin = KafkaAdminClient(bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS)
    try:
        admin.create_topics([NewTopic(name=topic_name, num_partitions=1, replication_factor=1)])
        await update.message.reply_text(f'–¢–æ–ø–∏–∫ "{topic_name}" —Å–æ–∑–¥–∞–Ω.', reply_markup=main_menu)
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}', reply_markup=main_menu)
    admin.close()

# –£–¥–∞–ª–∏—Ç—å —Ç–æ–ø–∏–∫
async def delete_topic(update: Update, topic_name: str):
    admin = KafkaAdminClient(bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS)
    try:
        admin.delete_topics([topic_name])
        await update.message.reply_text(f'–¢–æ–ø–∏–∫ "{topic_name}" —É–¥–∞–ª—ë–Ω.', reply_markup=main_menu)
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}', reply_markup=main_menu)
    admin.close()

# –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
async def view_messages(update: Update, topic_name: str):
    try:
        consumer = KafkaConsumer(topic_name, bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS, auto_offset_reset='earliest', consumer_timeout_ms=2000)
        messages = [msg.value.decode('utf-8') for msg in consumer]
        if messages:
            await update.message.reply_text('–°–æ–æ–±—â–µ–Ω–∏—è:\n' + '\n'.join(messages[-10:]), reply_markup=main_menu)
        else:
            await update.message.reply_text('–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ.', reply_markup=main_menu)
        consumer.close()
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}', reply_markup=main_menu)

# –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_message(update: Update, topic_name: str, text: str):
    try:
        producer = KafkaProducer(bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS)
        producer.send(topic_name, text.encode('utf-8'))
        producer.flush()
        await update.message.reply_text(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ "{topic_name}".', reply_markup=main_menu)
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}', reply_markup=main_menu)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main()) 